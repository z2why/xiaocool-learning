{"ast":null,"code":"import E from 'wangeditor';\nexport default {\n  name: 'EditorBar',\n  data() {\n    return {\n      // uploadPath,\n      editor: null,\n      info_: null\n    };\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    isClear: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    isClear(val) {\n      // 触发清除文本域内容\n      if (val) {\n        this.editor.txt.clear();\n        this.info_ = null;\n      }\n    },\n    value: function (value) {\n      if (value !== this.editor.txt.html()) {\n        this.editor.txt.html(this.value);\n      }\n    }\n    //value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值\n  },\n\n  mounted() {\n    this.seteditor();\n    this.editor.txt.html(this.value);\n  },\n  methods: {\n    seteditor() {\n      // http://192.168.2.125:8080/admin/storage/create\n      this.editor = new E(this.$refs.toolbar, this.$refs.editor);\n      this.editor.config.uploadImgShowBase64 = false; // base 64 存储图片\n      this.editor.config.uploadImgServer = 'http://172.20.195.205:9090/service-coustype/file/upload'; // 配置服务器端地址\n      this.editor.config.uploadImgHeaders = {}; // 自定义 header\n      this.editor.config.uploadFileName = 'file'; // 后端接受上传文件的参数名\n      this.editor.config.uploadImgMaxSize = 2 * 1024 * 1024; // 将图片大小限制为 2M\n      this.editor.config.uploadImgMaxLength = 6; // 限制一次最多上传 3 张图片\n      this.editor.config.uploadImgTimeout = 3 * 60 * 1000; // 设置超时时间\n\n      // 配置菜单\n      this.editor.config.menus = ['head',\n      // 标题\n      'bold',\n      // 粗体\n      'fontSize',\n      // 字号\n      'fontName',\n      // 字体\n      'italic',\n      // 斜体\n      'underline',\n      // 下划线\n      'strikeThrough',\n      // 删除线\n      'foreColor',\n      // 文字颜色\n      'backColor',\n      // 背景颜色\n      'link',\n      // 插入链接\n      'list',\n      // 列表\n      'justify',\n      // 对齐方式\n      'quote',\n      // 引用\n      'emoticon',\n      // 表情\n      'image',\n      // 插入图片\n      //   'table', // 表格\n      //   'video', // 插入视频\n      'code',\n      // 插入代码\n      'undo',\n      // 撤销\n      'redo',\n      // 重复\n      'fullscreen' // 全屏\n      ];\n\n      this.editor.config.uploadImgHooks = {\n        fail: (xhr, editor, result) => {\n          console.log(result, '插入图片失败回调');\n          // 插入图片失败回调\n        },\n\n        success: (xhr, editor, result) => {\n          // 图片上传成功回调\n        },\n        timeout: (xhr, editor) => {\n          // 网络超时的回调\n        },\n        error: (xhr, editor) => {\n          // 图片上传错误的回调\n        },\n        customInsert: (insertImg, result, editor) => {\n          // 图片上传成功，插入图片的回调\n          //result为上传图片成功的时候返回的数据，这里我打印了一下发现后台返回的是data：[{url:\"路径的形式\"},...]\n          // console.log(result.data[0].url)\n          //insertImg()为插入图片的函数\n          //循环插入图片\n          // for (let i = 0; i < 1; i++) {\n          // console.log(result)\n\n          console.log(result, 'result');\n          for (let i = 0; i < result.data.length; i++) {\n            let url = result.data[i].url;\n            insertImg(url);\n          }\n          // }\n        }\n      };\n\n      this.editor.config.onchange = html => {\n        this.info_ = html; // 绑定当前逐渐地值\n        this.$emit('change', this.info_); // 将内容同步到父组件中\n      };\n      // 创建富文本编辑器\n      this.editor.create();\n    }\n  }\n};","map":{"version":3,"mappings":"AAUA;AACA;EACAA;EACAC;IACA;MACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;IACAC;EACA;EACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;MACAC;IACA;EACA;EACAE;IACAD;MACA;MACA;QACA;QACA;MACA;IACA;IACAH;MACA;QACA;MACA;IACA;IACA;EACA;;EACAK;IACA;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA,4BACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MACA;MACA;MAAA;MACA;MAAA;MACA;MAAA;MACA;MAAA,CACA;;MAEA;QACAC;UACAC;UACA;QACA;;QACAC;UACA;QACA;QACAC;UACA;QACA;QACAC;UACA;QACA;QACAC;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEAJ;UACA;YACA;YACAK;UACA;UACA;QACA;MACA;;MACA;QACA;QACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","data","editor","info_","model","prop","event","props","value","type","default","isClear","watch","mounted","methods","seteditor","fail","console","success","timeout","error","customInsert","insertImg"],"sourceRoot":"src/components","sources":["Editor.vue"],"sourcesContent":["<template lang=\"html\">\r\n    <div class=\"editor\">\r\n      <div ref=\"toolbar\" class=\"toolbar\">\r\n      </div>\r\n      <div ref=\"editor\" class=\"text\">\r\n      </div>\r\n    </div>\r\n  </template>\r\n   \r\n  <script>\r\n  import E from 'wangeditor'\r\n  export default {\r\n    name: 'EditorBar',\r\n    data() {\r\n      return {\r\n        // uploadPath,\r\n        editor: null,\r\n        info_: null\r\n      }\r\n    },\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    },\r\n    props: {\r\n      value: {\r\n        type: String,\r\n        default: ''\r\n      },\r\n      isClear: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    watch: {\r\n      isClear(val) {\r\n        // 触发清除文本域内容\r\n        if (val) {\r\n          this.editor.txt.clear()\r\n          this.info_ = null\r\n        }\r\n      },\r\n      value: function(value) {\r\n        if (value !== this.editor.txt.html()) {\r\n          this.editor.txt.html(this.value)\r\n        }\r\n      }\r\n      //value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值\r\n    },\r\n    mounted() {\r\n      this.seteditor()\r\n      this.editor.txt.html(this.value)\r\n    },\r\n    methods: {\r\n      seteditor() {\r\n        // http://192.168.2.125:8080/admin/storage/create\r\n        this.editor = new E(this.$refs.toolbar, this.$refs.editor)\r\n        this.editor.config.uploadImgShowBase64 = false // base 64 存储图片\r\n        this.editor.config.uploadImgServer = 'http://172.20.195.205:9090/service-coustype/file/upload'// 配置服务器端地址\r\n        this.editor.config.uploadImgHeaders = { }// 自定义 header\r\n        this.editor.config.uploadFileName = 'file' // 后端接受上传文件的参数名\r\n        this.editor.config.uploadImgMaxSize = 2 * 1024 * 1024 // 将图片大小限制为 2M\r\n        this.editor.config.uploadImgMaxLength = 6 // 限制一次最多上传 3 张图片\r\n        this.editor.config.uploadImgTimeout = 3 * 60 * 1000 // 设置超时时间\r\n   \r\n        // 配置菜单\r\n        this.editor.config.menus = [\r\n          'head', // 标题\r\n          'bold', // 粗体\r\n          'fontSize', // 字号\r\n          'fontName', // 字体\r\n          'italic', // 斜体\r\n          'underline', // 下划线\r\n          'strikeThrough', // 删除线\r\n          'foreColor', // 文字颜色\r\n          'backColor', // 背景颜色\r\n          'link', // 插入链接\r\n          'list', // 列表\r\n          'justify', // 对齐方式\r\n          'quote', // 引用\r\n          'emoticon', // 表情\r\n          'image', // 插入图片\r\n        //   'table', // 表格\r\n        //   'video', // 插入视频\r\n          'code', // 插入代码\r\n          'undo', // 撤销\r\n          'redo', // 重复\r\n          'fullscreen' // 全屏\r\n        ]\r\n   \r\n        this.editor.config.uploadImgHooks = {\r\n          fail: (xhr, editor, result) => {\r\n            console.log(result,'插入图片失败回调')\r\n            // 插入图片失败回调\r\n          },\r\n          success: (xhr, editor, result) => {\r\n            // 图片上传成功回调\r\n          },\r\n          timeout: (xhr, editor) => {\r\n            // 网络超时的回调\r\n          },\r\n          error: (xhr, editor) => {\r\n            // 图片上传错误的回调\r\n          },\r\n          customInsert: (insertImg, result, editor) => {\r\n            // 图片上传成功，插入图片的回调\r\n            //result为上传图片成功的时候返回的数据，这里我打印了一下发现后台返回的是data：[{url:\"路径的形式\"},...]\r\n            // console.log(result.data[0].url)\r\n            //insertImg()为插入图片的函数\r\n            //循环插入图片\r\n            // for (let i = 0; i < 1; i++) {\r\n            // console.log(result)\r\n\r\n            console.log(result,'result')           \r\n            for (let i=0 ;i< result.data.length ;i++){\r\n              let url = result.data[i].url\r\n              insertImg(url)\r\n            }\r\n            // }\r\n          }\r\n        }\r\n        this.editor.config.onchange = (html) => {\r\n          this.info_ = html // 绑定当前逐渐地值\r\n          this.$emit('change', this.info_) // 将内容同步到父组件中\r\n        }\r\n        // 创建富文本编辑器\r\n        this.editor.create()\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n   \r\n  <style lang=\"css\">\r\n  .editor {\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    position: relative;\r\n    z-index: 0;\r\n  }\r\n  .toolbar {\r\n    border: 1px solid #ccc;\r\n  }\r\n  .text {\r\n    border: 1px solid #ccc;\r\n    min-height: 300px;\r\n  }\r\n  </style>"]},"metadata":{},"sourceType":"module"}